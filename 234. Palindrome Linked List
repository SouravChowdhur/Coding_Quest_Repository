class Solution {
public:
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* next = curr->next;

        while(curr != NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head == NULL){
            return true;
        }
        if(head->next == NULL){
            return true;
        }

        // step 1: Find middle of linked list
        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast != NULL){
            fast = fast->next;
            if(fast != NULL){
                fast = fast->next;
                slow = slow->next;
            }
        }

        // step 2: Reverse LL after middle node
        ListNode* reverseKaHead = reverse(slow->next);

        slow->next = reverseKaHead;

        ListNode* temp1 = head;
        ListNode* temp2 = reverseKaHead;

        while(temp2 != NULL){
            if(temp1->val != temp2->val){
                return false;
            }
            else{
                temp1 =temp1->next;
                temp2 = temp2->next;
            }
        }
        return true;
    }
};
